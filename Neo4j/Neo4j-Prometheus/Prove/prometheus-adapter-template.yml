apiVersion: v1
kind: Template
labels:
  template: prometheus-adapter-template #${NAMESPACE}-template
message: Your template has been created.
metadata:
  name: prometheus-adapter-template #${NAMESPACE}-template
objects:

#-----------Add configuration details for creating the service account, roles, and role bindings for prometheus-adapter:

#ServiceAccount
- kind: ServiceAccount
  apiVersion: v1
  metadata:
    labels:
      app: ${NAME}
    name: custom-metrics-apiserver
    namespace: ${NAMESPACE} #custom-prometheus


#ClusterRole
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    labels:
      app: ${NAME}
    name: custom-metrics-server-resources
  rules:
    - apiGroups:
        - custom.metrics.k8s.io
      resources: ["*"]
      verbs: ["*"]

#ClusterRole
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    labels:
      app: ${NAME}
    name: custom-metrics-resource-reader
  rules:
    - apiGroups:
        - ""
      resources:
        - namespaces
        - pods
        - services
      verbs:
        - get
        - list

#ClusterRoleBinding
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    labels:
      app: ${NAME}
    name: custom-metrics:system:auth-delegator
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
    - kind: ServiceAccount
      name: custom-metrics-apiserver
      namespace: ${NAMESPACE} #custom-prometheus

#RoleBinding
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app: ${NAME}
    name: custom-metrics-auth-reader
    namespace: kube-system
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: extension-apiserver-authentication-reader
  subjects:
    - kind: ServiceAccount
      name: custom-metrics-apiserver
      namespace: ${NAMESPACE} #custom-prometheus

#ClusterRoleBinding
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    labels:
      app: ${NAME}
    name: custom-metrics-resource-reader
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: custom-metrics-resource-reader
  subjects:
    - kind: ServiceAccount
      name: custom-metrics-apiserver
      namespace: ${NAMESPACE} #custom-prometheus

#ClusterRoleBinding
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    labels:
      app: ${NAME}
    name: hpa-controller-custom-metrics
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: custom-metrics-server-resources
  subjects:
    - kind: ServiceAccount
      name: horizontal-pod-autoscaler
      namespace: ${NAMESPACE} #kube-system

#-----------------------------------------------Add configuration details for the custom metrics for prometheus-adapter:

#ConfigMap
#- apiVersion: v1
#  kind: ConfigMap
#  metadata:
#    labels:
#      app: ${NAME}
#    name: adapter-config
#    namespace: ${NAMESPACE} #custom-prometheus
#  data:
#    #http_requests_total
#    config.yaml: |
#      rules:
#      - seriesQuery: 'http_requests_total{namespace!="",pod!=""}'
#        resources:
#          overrides:
#            namespace: {resource: "namespace"}
#            pod: {resource: "pod"}
#            service: {resource: "service"}
#        name:
#          matches: "^(.*)_total"
#          as: "${1}_per_second"
#        metricsQuery: 'sum(rate(<<.Series>>{<<.LabelMatchers>>}[2m])) by (<<.GroupBy>>)'
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: adapter-config
    namespace: default
  data:
    config.yaml: |
      rules:
      - seriesQuery: '{__name__="nginx_http_requests_total",namespace!="",pod!=""}'
        resources:
          overrides:
            namespace: {resource: "namespace"}
            pod: {resource: "pod"}
            service: {resource: "service"}
        name:
          matches: "^(.*)_total"
          as: "${1}_per_second"
        metricsQuery: 'sum(rate(<<.Series>>{<<.LabelMatchers>>}[2m])) by (<<.GroupBy>>)'

#----------------------------------------Add configuration details for registering prometheus-adapter as an API service:

#Service
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: prometheus-adapter-tls
    labels:
      app: ${NAME}
      name: prometheus-adapter
    name: prometheus-adapter
    namespace: ${NAMESPACE} #custom-prometheus
  spec:
    ports:
      - name: https
        port: 443
        targetPort: 6443
    selector:
      app: prometheus-adapter
    type: ClusterIP

#APIService
- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    labels:
      app: ${NAME}
    name: v1beta1.custom.metrics.k8s.io
  spec:
    service:
      name: prometheus-adapter
      namespace: ${NAMESPACE} #custom-prometheus
    group: custom.metrics.k8s.io
    version: v1beta1
    insecureSkipTLSVerify: true
    groupPriorityMinimum: 100
    versionPriority: 100

#------------------------------------------------------------Add configuration details for deploying prometheus-adapter:

#Deployment
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ${NAME}
    name: prometheus-adapter
    namespace: custom-prometheus
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus-adapter
    template:
      metadata:
        labels:
          app: prometheus-adapter
        name: prometheus-adapter
      spec:
        serviceAccountName: custom-metrics-apiserver
        containers:
          - name: prometheus-adapter
            image: directxman12/k8s-prometheus-adapter-amd64
            args:
              - --secure-port=6443
              - --tls-cert-file=/var/run/serving-cert/tls.crt
              - --tls-private-key-file=/var/run/serving-cert/tls.key
              - --logtostderr=true
              - --prometheus-url=http://neo4j-prometheus:9090/
              - --metrics-relist-interval=1m
              - --v=4
              - --config=/etc/adapter/config.yaml
            ports:
              - containerPort: 6443
            volumeMounts:
              - mountPath: /var/run/serving-cert
                name: volume-serving-cert
                readOnly: true
              - mountPath: /etc/adapter/
                name: config
                readOnly: true
              - mountPath: /tmp
                name: tmp-vol
        volumes:
          - name: volume-serving-cert
            secret:
              secretName: prometheus-adapter-tls
          - name: config
            configMap:
              name: adapter-config
          - name: tmp-vol
            emptyDir: {}

#------------------------------------------------------------------------------------------------------------Parameters:
parameters:

- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: "custom-prometheus"

- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  value: "prometheus-adapter"