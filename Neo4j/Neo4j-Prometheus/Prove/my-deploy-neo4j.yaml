#image stream Neo4j
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: example-app
---
#build config
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: example-app
spec:
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: example-app:latest
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    contextDir: '/Neo4j/Neo4j-Prometheus/Neo4j'
    git:
      ref: main
      uri: 'https://github.com/faber03/ProjectTest.git'
    type: Git
  strategy:
    dockerStrategy:
    #dockerfilePath: neo4j/Dockerfile
    # from:
    #   kind: DockerImage
    #   name: 'mysql:8.0.20'
    type: Docker
  triggers:
    - imageChange:
        lastTriggeredImageID: #>-
        #docker.io/openshift/wildfly-101-centos7@sha256:7775d40f77e22897dc760b76f1656f67ef6bd5561b4d74fbb030b977f61d48e8
      type: ImageChange
    - type: ConfigChange
    - generic:
        secret: 9fdf619e0aea935a
      type: Generic
    - github:
        secret: 43ac13d4078565c4
      type: GitHub
---
#deployment
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: example-app
spec:
  replicas: 1
  selector:
      app: example-app
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: example-app
    spec:
      containers:
        #----------------
        # neo4j container
        #----------------
        - image: example-app:latest
          name: example-app
          ports:
            - containerPort: 7474
              protocol: TCP
              name: http
            - containerPort: 7687
              protocol: TCP
              name: bolt
            - containerPort: 7473
              protocol: TCP
              name: https
            - containerPort: 2004
              protocol: TCP
              name: export
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          env:
            - name: NEO4J_AUTH
              value: "neo4j/password"
          volumeMounts:
            - mountPath: "/neo4j/data"
              name: neo4j-data
            - mountPath: "/neo4j/logs"
              name: neo4j-logs
            - mountPath: "/neo4j/conf"
              name: neo4j-conf
      volumes:
        #neo4j volumes
        - name: neo4j-data
        - name: neo4j-logs
        - name: neo4j-conf
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  test: false
  triggers:
    #trigget neo4j
    - imageChangeParams:
        automatic: true
        containerNames:
          - example-app
        from:
          kind: ImageStreamTag
          name: example-app:latest
      type: ImageChange
    - type: ConfigChange
---
#service
apiVersion: v1
kind: Service
metadata:
  labels:
    app: example-app
  name: example-app
spec:
  ports:
    - name: export
      port: 2004
  selector:
    app: example-app