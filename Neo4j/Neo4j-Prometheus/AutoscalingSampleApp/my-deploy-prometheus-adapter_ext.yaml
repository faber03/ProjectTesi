#-------------------
#serviceaccount.yaml
#-------------------
kind: ServiceAccount
apiVersion: v1
metadata:
  name: custom-metrics-apiserver
  namespace: default
---
#apiVersion: rbac.authorization.k8s.io/v1
##apiVersion: rbac.authorization.k8s.io/v1beta1
#kind: ClusterRole
#metadata:
#  name: custom-metrics-server-resources
#rules:
#  - apiGroups:
#      - external.metrics.k8s.io
#    resources: ["*"]
#    verbs: ["*"]

#----------------------------------
#external-metrics-cluster-role.yaml
#----------------------------------
apiVersion: rbac.authorization.k8s.io/v1
#apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  #name: custom-metrics-server-resources
  name: custom-metrics-external-metrics
rules:
  - apiGroups:
      - "external.metrics.k8s.io"
    resources:
      - "*"
    verbs:
      - list
      - get
      - watch
---
#apiVersion: rbac.authorization.k8s.io/v1
##apiVersion: rbac.authorization.k8s.io/v1beta1
#kind: ClusterRole
#metadata:
#  name: custom-metrics-resource-reader
#rules:
#  - apiGroups:
#      - ""
#    resources:
#      - namespaces
#      - pods
#      - services
#      - configmaps
#    verbs:
#      - get
#      - list
#      - watch
#---------------------------------
#cluster-role-resource-reader.yaml
#---------------------------------
apiVersion: rbac.authorization.k8s.io/v1
#apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: custom-metrics-resource-reader
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
      - services
      - configmaps
    verbs:
      - get
      - list
      - watch
---
#apiVersion: rbac.authorization.k8s.io/v1
##apiVersion: rbac.authorization.k8s.io/v1beta1
#kind: ClusterRoleBinding
#metadata:
#  name: custom-metrics:system:auth-delegator
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: ClusterRole
#  name: system:auth-delegator
#subjects:
#  - kind: ServiceAccount
#    name: custom-metrics-apiserver
#    namespace: default

#----------------------------------------
#cluster-role-binding-auth-delegator.yaml
#----------------------------------------
apiVersion: rbac.authorization.k8s.io/v1
#apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: custom-metrics-system-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: custom-metrics-apiserver
    namespace: default
---
#apiVersion: rbac.authorization.k8s.io/v1
##apiVersion: rbac.authorization.k8s.io/v1beta1
#kind: RoleBinding
#metadata:
#  name: custom-metrics-auth-reader
#  namespace: kube-system
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: Role
#  name: extension-apiserver-authentication-reader
#subjects:
#  - kind: ServiceAccount
#    name: custom-metrics-apiserver
#    namespace: default
#  - kind: User
#    name: adeiasio
#-----------------------------
#role-binding-auth-reader.yaml
#-----------------------------
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: custom-metrics-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: custom-metrics-apiserver
    namespace: default
---
#-----------------------------
#role-binding-auth-reader.yaml
#-----------------------------
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: custom-metrics-resource-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: custom-metrics-resource-reader
subjects:
  - kind: ServiceAccount
    name: custom-metrics-apiserver
    namespace: default
---
#apiVersion: rbac.authorization.k8s.io/v1
##apiVersion: rbac.authorization.k8s.io/v1beta1
#kind: ClusterRoleBinding
#metadata:
#  name: hpa-controller-custom-metrics
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: ClusterRole
#  name: custom-metrics-server-resources
#subjects:
#  - kind: ServiceAccount
#    name: horizontal-pod-autoscaler
#    namespace: default
#--------------------------------------------
#custom-metrics-cluster-role-binding-hpa.yaml
#--------------------------------------------
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: custom-metrics-hpa-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: custom-metrics-server-resources
subjects:
  - kind: ServiceAccount
    name: custom-metrics-apiserver
    namespace: default
---
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: adapter-config
#  namespace: default
#data:
#  config.yaml: |
#    rules:
#    - seriesQuery: '{__name__="neo4j_neo4j_transaction_active",namespace!="",pod!=""}'
#      resources:
#        overrides:
#          namespace: {resource: "namespace"}
#          pod: {resource: "pod"}
#          service: {resource: "service"}
#      name:
#        matches: "neo4j_neo4j_transaction_active"
#        as: "neo4j_neo4j_transaction_active"
#      metricsQuery: 'neo4j_neo4j_transaction_active'

#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: adapter-config
#  namespace: default
#data:
#  config.yaml: |
#    rules:
#    - seriesQuery: '{__name__="nginx_http_requests_total",namespace!="",pod!=""}'
#      resources:
#        overrides:
#          namespace: {resource: "namespace"}
#          pod: {resource: "pod"}
#          service: {resource: "service"}
#      name:
#        matches: "^(.*)_total"
#        as: "${1}_per_second"
#      metricsQuery: 'sum(rate(<<.Series>>{<<.LabelMatchers>>}[2m])) by (<<.GroupBy>>)'

#--------------
#configmap.yaml
#--------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: adapter-config
  namespace: default
data:
  config.yaml: |
    rules:
    - seriesQuery: '{__name__="nginx_http_requests_total",namespace!="",pod!=""}'
      resources:
        overrides:
          namespace: {resource: "namespace"}
          pod: {resource: "pod"}
          service: {resource: "service"}
      name:
        matches: "^(.*)_total"
        as: "${1}_per_second"
      metricsQuery: 'sum(rate(<<.Series>>{<<.LabelMatchers>>}[2m])) by (<<.GroupBy>>)'
---
#------------
#service.yaml
#------------
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: prometheus-adapter-tls
  labels:
    name: prometheus-adapter
  name: prometheus-adapter
  namespace: default
spec:
  ports:
    - name: https
      port: 443
      targetPort: 6443
  selector:
    app: prometheus-adapter
  type: ClusterIP
---
#apiVersion: apiregistration.k8s.io/v1beta1
#kind: APIService
#metadata:
#  name: v1beta1.external.metrics.k8s.io
#spec:
#  service:
#    name: prometheus-adapter
#    namespace: default
#  group: external.metrics.k8s.io
#  version: v1beta1
#  insecureSkipTLSVerify: true
#  groupPriorityMinimum: 100
#  versionPriority: 100

#---------------------------------
# resource-metrics-apiservice.yaml
#---------------------------------
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.external.metrics.k8s.io
spec:
  service:
    name: prometheus-adapter
    namespace: default
  group: external.metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
---
#aggiungo
#apiVersion: rbac.authorization.k8s.io/v1beta1
#kind: ClusterRole
#metadata:
#  name: prometheus
#rules:
#  - apiGroups: [""]
#    resources:
#      - nodes
#      - nodes/metrics
#      - services
#      - endpoints
#      - pods
#    verbs: ["get", "list", "watch"]
#  - apiGroups: [""]
#    resources:
#      - configmaps
#    verbs: ["get"]
#  - apiGroups:
#      - networking.k8s.io
#    resources:
#      - ingresses
#    verbs: ["get", "list", "watch"]
#  - nonResourceURLs: ["/metrics"]
#    verbs: ["get"]


---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  labels:
#    app: prometheus-adapter
#  name: prometheus-adapter
#  namespace: default
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: prometheus-adapter
#  template:
#    metadata:
#      labels:
#        app: prometheus-adapter
#      name: prometheus-adapter
#    spec:
#      serviceAccountName: custom-metrics-apiserver
#      containers:
#        - name: prometheus-adapter
#          image: directxman12/k8s-prometheus-adapter-amd64
#          args:
#            - --secure-port=6443
#            - --tls-cert-file=/var/run/serving-cert/tls.crt
#            - --tls-private-key-file=/var/run/serving-cert/tls.key
#            - --logtostderr=true
#            #- --prometheus-url=http://prometheus.default.svc:9090/
#            - --prometheus-url=http://prometheus-operated.default.svc:9090/
#            - --metrics-relist-interval=1m
#            - --v=4
#            - --config=/etc/adapter/config.yaml
#          ports:
#            - containerPort: 6443
#          volumeMounts:
#            - mountPath: /var/run/serving-cert
#              name: volume-serving-cert
#              readOnly: true
#            - mountPath: /etc/adapter/
#              name: config
#              readOnly: true
#            - mountPath: /tmp
#              name: tmp-vol
#      volumes:
#        - name: volume-serving-cert
#          secret:
#            secretName: prometheus-adapter-tls
#        - name: config
#          configMap:
#            name: adapter-config
#        - name: tmp-vol
#          emptyDir: {}

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus-adapter
  name: prometheus-adapter
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-adapter
  template:
    metadata:
      labels:
        app: prometheus-adapter
      name: prometheus-adapter
    spec:
      serviceAccountName: custom-metrics-apiserver
      #hostNetwork: true
      #dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: prometheus-adapter
          image: "directxman12/k8s-prometheus-adapter-amd64:v0.8.3"
          args:
            - /adapter
            - --secure-port=6443
            - --tls-cert-file=/var/run/serving-cert/tls.crt
            - --tls-private-key-file=/var/run/serving-cert/tls.key
            - --cert-dir=/tmp/cert
            - --logtostderr=true
            #- --prometheus-url=http://prometheus.default.svc:9090/
            - --prometheus-url=http://prometheus-operated.default.svc:9090/
            - --metrics-relist-interval=1m
            - --v=4
            - --config=/etc/adapter/config.yaml
          ports:
            - containerPort: 6443
              name: https
          volumeMounts:
            - mountPath: /var/run/serving-cert
              name: volume-serving-cert
              readOnly: true
            - mountPath: /etc/adapter/
              name: config
              readOnly: true
            - mountPath: /tmp
              name: tmp
#          securityContext:
#            allowPrivilegeEscalation: false
#            capabilities:
#              drop: [ "all" ]
#            readOnlyRootFilesystem: true
#            runAsNonRoot: true
#            runAsUser: 1000100000
      volumes:
        - name: volume-serving-cert
          secret:
            secretName: prometheus-adapter-tls
        - name: config
          configMap:
            name: adapter-config
        - name: tmp
          emptyDir: {}